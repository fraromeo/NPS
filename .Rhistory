mutate(cat22 = if_else(is.na(cat2), 'Not Av', cat2)) %>%
select(cat22)
games.sep3 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat32 = if_else(is.na(cat3), 'Not Av', cat3)) %>%
select(cat32)
remove_first5 <- function(name) {
new_name = substring(name, 6)
return (new_name)
}
ChangeColnames <- function(x) {
colnames(x) <- remove_first5(colnames(x))
x
}
catmat1 <- model.matrix(~cat12-1, games.sep1)
catmat1 <- ChangeColnames(catmat1)
catmat2 <- model.matrix(~cat22-1, games.sep2)
catmat2 <- ChangeColnames(catmat2)
catmat3 <- model.matrix(~cat32-1, games.sep3)
catmat3 <- ChangeColnames(catmat3)
df.cat1 <- data.frame(catmat1)
df.cat1$id <- games$id
df.cat2 <- data.frame(catmat2)
df.cat2$id <- games$id
df.cat3 <- data.frame(catmat3)
df.cat3$id <- games$id
# add rownames as a column in each data.frame and bind rows
dm <-bind_rows(df.cat1,
df.cat2,
df.cat3
) %>%
# evaluate following calls for each value in the rowname column
group_by(id) %>%
# add all non-grouping variables
summarise_all(sum)
##### JOIN GAMES AND CATEGORY DATASET ####
dm$V1 <- NULL
games <- merge(games,dm, by='id')
games = games %>%
rename(
Childrens.Game = X.Childrens.Game.
)
games = games[, colSums(is.na(games)) != nrow(games)]
tab = colSums(games[,c(31:106)])
few_sample = names(tab)[tab < 73]
games[,few_sample] <- NULL
rm (list = ls())
tilda = '~' # clown
# Libraries
library(tidyverse)
library(tidytext)
library(caret)
library(cowplot)
library(dplyr)
details <-read.csv('games_detailed_info.csv') %>%
mutate(boardgamecategory = gsub("\\[", "", boardgamecategory), boardgamecategory = gsub("\\]", "", boardgamecategory), boardgamecategory = gsub(" \\/ ", "", boardgamecategory), boardgamecategory=gsub("\\/", "", boardgamecategory), boardgamecategory=gsub("'", "", boardgamecategory),
boardgamemechanic = gsub("\\[", "", boardgamemechanic), boardgamemechanic = gsub("\\]", "", boardgamemechanic), boardgamemechanic = gsub(" \\/ ", "", boardgamemechanic), boardgamemechanic=gsub("\\/", "", boardgamemechanic), boardgamemechanic=gsub("'", "", boardgamemechanic),
boardgamefamily = gsub("\\[", "", boardgamefamily), boardgamefamily = gsub("\\]", "", boardgamefamily), boardgamefamily = gsub(" \\/ ", "", boardgamefamily), boardgamefamily=gsub("\\/", "", boardgamefamily), boardgamefamily=gsub("'", "", boardgamefamily),
boardgamepublisher = gsub("\\[", "", boardgamepublisher), boardgamepublisher = gsub("\\]", "", boardgamepublisher), boardgamepublisher = gsub(" \\/ ", "", boardgamepublisher), boardgamepublisher=gsub("\\/", "", boardgamepublisher), boardgamefamily=gsub("'", "", boardgamepublisher))
#### Cleaning Data ####
games <- details
names(games)
# Remove Sector Rank
games[c('Amiga.Rank', 'Atari.ST.Rank', 'Arcade.Rank', "Commodore.64.Rank", "Video.Game.Rank",
"Accessory.Rank", "RPG.Item.Rank" , "Children.s.Game.Rank", "Customizable.Rank", "War.Game.Rank",
"Thematic.Rank", "Abstract.Game.Rank", "Party.Game.Rank", "Board.Game.Rank", "Strategy.Game.Rank", "Family.Game.Rank")] <- NULL
# Remove useless features
games[c("X","thumbnail","image", "type", "alternate")] <- NULL
games[c("boardgameintegration", "boardgamecompilation", "boardgameimplementation", "boardgameexpansion")] <- NULL
# Always to 0
games[c("median")] <- NULL
names(games)
games = games %>%
dplyr::rename(year = yearpublished,
category = boardgamecategory,
mechanic = boardgamemechanic,
family = boardgamefamily,
designer = boardgamedesigner,
artist = boardgameartist,
publisher = boardgamepublisher,
numratings = usersrated,
name = primary
)
names(games)
#Games with published year = 0 -> fake
zero.year = games$year <= 0
games[zero.year ,c('name')] # they are clearly more recent -> not trustworthy
games = games[!zero.year,]
games <- games %>%
filter(!is.na(category))
games.sep1 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat12 = if_else(is.na(cat1), 'Not Av', cat1)) %>%
select(cat12)
rm (list = ls())
tilda = '~' # clown
# Libraries
library(tidyverse)
library(tidytext)
library(caret)
library(cowplot)
library(dplyr)
details <-read.csv('games_detailed_info.csv') %>%
mutate(boardgamecategory = gsub("\\[", "", boardgamecategory), boardgamecategory = gsub("\\]", "", boardgamecategory), boardgamecategory = gsub(" \\/ ", "", boardgamecategory), boardgamecategory=gsub("\\/", "", boardgamecategory), boardgamecategory=gsub("'", "", boardgamecategory),
boardgamemechanic = gsub("\\[", "", boardgamemechanic), boardgamemechanic = gsub("\\]", "", boardgamemechanic), boardgamemechanic = gsub(" \\/ ", "", boardgamemechanic), boardgamemechanic=gsub("\\/", "", boardgamemechanic), boardgamemechanic=gsub("'", "", boardgamemechanic),
boardgamefamily = gsub("\\[", "", boardgamefamily), boardgamefamily = gsub("\\]", "", boardgamefamily), boardgamefamily = gsub(" \\/ ", "", boardgamefamily), boardgamefamily=gsub("\\/", "", boardgamefamily), boardgamefamily=gsub("'", "", boardgamefamily),
boardgamepublisher = gsub("\\[", "", boardgamepublisher), boardgamepublisher = gsub("\\]", "", boardgamepublisher), boardgamepublisher = gsub(" \\/ ", "", boardgamepublisher), boardgamepublisher=gsub("\\/", "", boardgamepublisher), boardgamefamily=gsub("'", "", boardgamepublisher))
glimpse(details)
summary(details)
#### Cleaning Data ####
games <- details
names(games)
# Remove Sector Rank
games[c('Amiga.Rank', 'Atari.ST.Rank', 'Arcade.Rank', "Commodore.64.Rank", "Video.Game.Rank",
"Accessory.Rank", "RPG.Item.Rank" , "Children.s.Game.Rank", "Customizable.Rank", "War.Game.Rank",
"Thematic.Rank", "Abstract.Game.Rank", "Party.Game.Rank", "Board.Game.Rank", "Strategy.Game.Rank", "Family.Game.Rank")] <- NULL
# Remove useless features
games[c("X","thumbnail","image", "type", "alternate")] <- NULL
games[c("boardgameintegration", "boardgamecompilation", "boardgameimplementation", "boardgameexpansion")] <- NULL
# Always to 0
games[c("median")] <- NULL
names(games)
games = games %>%
dplyr::rename(year = yearpublished,
category = boardgamecategory,
mechanic = boardgamemechanic,
family = boardgamefamily,
designer = boardgamedesigner,
artist = boardgameartist,
publisher = boardgamepublisher,
numratings = usersrated,
name = primary
)
names(games)
#Games with published year = 0 -> fake
zero.year = games$year <= 0
games[zero.year ,c('name')] # they are clearly more recent -> not trustworthy
games = games[!zero.year,]
games <- games %>%
filter(!is.na(category))
games.sep1 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat12 = if_else(is.na(cat1), 'Not Av', cat1)) %>%
select(cat12)
games.sep1 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat12 = if_else(is.na(cat1), 'Not Av', cat1)) #%>%
games.sep1 = games.sep1$cat12
rm (list = ls())
tilda = '~' # clown
# Libraries
library(tidyverse)
library(tidytext)
library(caret)
library(cowplot)
library(dplyr)
details <-read.csv('games_detailed_info.csv') %>%
mutate(boardgamecategory = gsub("\\[", "", boardgamecategory), boardgamecategory = gsub("\\]", "", boardgamecategory), boardgamecategory = gsub(" \\/ ", "", boardgamecategory), boardgamecategory=gsub("\\/", "", boardgamecategory), boardgamecategory=gsub("'", "", boardgamecategory),
boardgamemechanic = gsub("\\[", "", boardgamemechanic), boardgamemechanic = gsub("\\]", "", boardgamemechanic), boardgamemechanic = gsub(" \\/ ", "", boardgamemechanic), boardgamemechanic=gsub("\\/", "", boardgamemechanic), boardgamemechanic=gsub("'", "", boardgamemechanic),
boardgamefamily = gsub("\\[", "", boardgamefamily), boardgamefamily = gsub("\\]", "", boardgamefamily), boardgamefamily = gsub(" \\/ ", "", boardgamefamily), boardgamefamily=gsub("\\/", "", boardgamefamily), boardgamefamily=gsub("'", "", boardgamefamily),
boardgamepublisher = gsub("\\[", "", boardgamepublisher), boardgamepublisher = gsub("\\]", "", boardgamepublisher), boardgamepublisher = gsub(" \\/ ", "", boardgamepublisher), boardgamepublisher=gsub("\\/", "", boardgamepublisher), boardgamefamily=gsub("'", "", boardgamepublisher))
glimpse(details)
summary(details)
#### Cleaning Data ####
games <- details
names(games)
# Remove Sector Rank
games[c('Amiga.Rank', 'Atari.ST.Rank', 'Arcade.Rank', "Commodore.64.Rank", "Video.Game.Rank",
"Accessory.Rank", "RPG.Item.Rank" , "Children.s.Game.Rank", "Customizable.Rank", "War.Game.Rank",
"Thematic.Rank", "Abstract.Game.Rank", "Party.Game.Rank", "Board.Game.Rank", "Strategy.Game.Rank", "Family.Game.Rank")] <- NULL
# Remove useless features
games[c("X","thumbnail","image", "type", "alternate")] <- NULL
games[c("boardgameintegration", "boardgamecompilation", "boardgameimplementation", "boardgameexpansion")] <- NULL
# Always to 0
games[c("median")] <- NULL
names(games)
games = games %>%
dplyr::rename(year = yearpublished,
category = boardgamecategory,
mechanic = boardgamemechanic,
family = boardgamefamily,
designer = boardgamedesigner,
artist = boardgameartist,
publisher = boardgamepublisher,
numratings = usersrated,
name = primary
)
names(games)
#Games with published year = 0 -> fake
zero.year = games$year <= 0
games[zero.year ,c('name')] # they are clearly more recent -> not trustworthy
games = games[!zero.year,]
games <- games %>%
filter(!is.na(category))
games.sep1 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat12 = if_else(is.na(cat1), 'Not Av', cat1)) #%>%
games.sep1 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat12 = if_else(is.na(cat1), 'Not Av', cat1)) %>%
select(cat12)
games.sep2 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat22 = if_else(is.na(cat2), 'Not Av', cat2)) %>%
select(cat22)
games.sep3 <- games %>%
separate(category, c('cat1', 'cat2', 'cat3'), sep = ", ") %>%
mutate(cat32 = if_else(is.na(cat3), 'Not Av', cat3)) %>%
select(cat32)
remove_first5 <- function(name) {
new_name = substring(name, 6)
return (new_name)
}
ChangeColnames <- function(x) {
colnames(x) <- remove_first5(colnames(x))
x
}
catmat1 <- model.matrix(~cat12-1, games.sep1)
catmat1 <- ChangeColnames(catmat1)
catmat2 <- model.matrix(~cat22-1, games.sep2)
catmat2 <- ChangeColnames(catmat2)
catmat3 <- model.matrix(~cat32-1, games.sep3)
catmat3 <- ChangeColnames(catmat3)
df.cat1 <- data.frame(catmat1)
df.cat1$id <- games$id
df.cat2 <- data.frame(catmat2)
df.cat2$id <- games$id
df.cat3 <- data.frame(catmat3)
df.cat3$id <- games$id
# add rownames as a column in each data.frame and bind rows
dm <-bind_rows(df.cat1,
df.cat2,
df.cat3
) %>%
# evaluate following calls for each value in the rowname column
group_by(id) %>%
# add all non-grouping variables
summarise_all(sum)
dm$V1 <- NULL
games <- merge(games,dm, by='id')
games = games %>%
rename(
Childrens.Game = X.Childrens.Game.
)
games = games[, colSums(is.na(games)) != nrow(games)]
tab = colSums(games[,c(31:106)])
few_sample = names(tab)[tab < 73]
games[,few_sample] <- NULL
# further cleaning
games <- games[!games[,'numweights'] == 0,]
dim(games)
plot(games$averageweight, games$average)
bagplot(games[,c('averageweight','average')],depth_params = list(method = 'Tukey') )
library(DepthProc)
bagplot(games[,c('averageweight','average')],depth_params = list(method = 'Tukey') )
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(packagefinder)
library(aplpack)
library(robustbase)
bagplot(games[,c('averageweight','average')],depth_params = list(method = 'Tukey') )
bagplot_games <- bagplot(games[,c('averageweight','average')],depth_params = list(method = 'Tukey') )
bagplot_games$pxy.outlier
outlying_obs <- bagplot_games$pxy.outlier
ind_outlying_obs <- which(apply(games,1,function(x) all(x %in% outlying_obs)))
help(bagplot)
ind_outlying_obs <- which(apply(games[,c('averageweight','average')],1,function(x) all(x %in% outlying_obs)))
games[ind_outlying_obs,'name']
depthMedian(games[,c('averageweight','average')])
median(games$average)
help("depthContour")
help("depthPersp")
bagplot.pairs(games[,c('averageweight','numratings','numweights')])
bagplot(games[,c('numratings','numweights')])
out <- bagplot(games[,c('numratings','numweights')])
out <- out$pxy.outlier
dim(out)
help("bagplot")
bagplot(games[,c('numratings','numweights')], show.whiskers = FALSE)
bagplot(games[games[,'numratings'] < 2000,c('numratings','numweights')], show.whiskers = FALSE)
dim(games[,'numratings'] < 2000)
dim(games[games[,'numratings'] < 2000,])
View(games)
d <- depth(games[,c("averageweight","numratings","numweights","playingtime","minplayers","maxplayers")])
hist(d)
d <- depth(games[,c("averageweight","numratings","numweights","playingtime","minplayers","maxplayers")], method = 'Tukey' )
hist(d)
help("depth")
head(d)
library(tidyverse)
library(tidytext)
library(caret)
library(cowplot)
library(dplyr)
library(GGally)
library(DepthProc)
library(aplpack)
library(splines)
library(mgcv)
games <- readRDS("data.RDS")
glimpse(games)
names(games)
table(games[,31:100])
X <- as.matrix(games[,31:100])
out <- crossprod(X)  # Same as: t(X) %*% X
diag(out) <- 0       # (b/c you don't count co-occurrences of an aspect with itself)
out
games <- readRDS("data.RDS")
glimpse(games)
summary(games)
dim(games)
dim(games[games$year > 1990, ])
# maybe we can discard games before 1990
# also because they are not wanted
plot(games$year, games$wanting)
plot(games$year[games$wanting > 500], games$wanting[games$wanting > 500])
boxplot(games$average ~ I(games$minage > 10))
boxplot(games$averageweight ~ I(games$wishing > 1000)) # either too complex or too simple games are less desired
boxplot(games$averageweight ~ I(games$wanting > 1000))
plot(games$minage, games$wanting)
plot(games$playingtime, games$wanting) # outliers can be detected with bagplot
bagplot <- bagplot(games$playingtime, games$wanting)
# outliers wrt wanting -> important, might be very succcesfull game
# outliers wrt playingtime -> can be discarded
plot(games$playingtime[games$playingtime < 1000], games$wanting[games$playingtime < 1000])
bagplot <- bagplot(games$playingtime[games$playingtime < 1000], games$wanting[games$playingtime < 1000])
#### analysis of most wished/wanted games (wishing and wanting have a correlation of almost 1 )
coll_wanting <- NULL
for(i in 31:100){
ind <- games[,i] == 1
coll_wanting <- c(coll_wanting, sum(games[ind,'wanting']))
}
df <- data.frame(coll_wanting)
rownames(df) <- colnames(games)[31:100]
# df contains wanting per category
most_wanted_category <- rownames(df)[which(df$coll_wanting == max(df$coll_wanting))]
summary(games$wishing)
summary(games$wanting)
length(which(games$wanting > 50)) # 17%
length(which(games$wishing > 100))
boxplot(games$averageweight ~ I(games$wishing > 100)) # either too complex or too simple games are less desired
boxplot(games$averageweight ~ I(games$wanting > 50))
hist(games$averageweight[games$wanting > 50])
hist(games$averageweight[games$wanting < 50])
## permutational anova to confirm difference between two groups
## average_weight ~ wanting > 1000
B = 1000
seed = 26111992
fit <- aov(games$averageweight ~ I(games$wanting > 50))
T0 <- summary(fit)[[1]][1,4]
T_stat <- numeric(B)
n <- length(games$averageweight)
for(i in 1:B){
perm <- sample(1:n)
avgw_perm <- games$averageweight[perm]
fit_p <- aov(avgw_perm ~ I(games$wanting > 50) )
T_stat[i] <- summary(fit_p)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,20))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val # as expected the difference is significant
## permutational anova to confirm difference between two groups
## average_weight ~ wishing > 100
B = 1000
seed = 26111992
fit <- aov(games$averageweight ~ I(games$wishing > 100))
T0 <- summary(fit)[[1]][1,4]
T_stat <- numeric(B)
n <- length(games$averageweight)
for(i in 1:B){
perm <- sample(1:n)
avgw_perm <- games$averageweight[perm]
fit_p <- aov(avgw_perm ~ I(games$wishing > 100) )
T_stat[i] <- summary(fit_p)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,20))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val # as expected the difference is significant
boxplot(games$wanting ~ I(games$minage > 10))
fit <- aov(games$averageweight ~ I(games$wishing > 100))
fit
summary(fit)
plot(fit)
fit$residuals
shapiro.test(fit$residuals)
boxplot(games$wanting ~ I(games$minage > 10))
B = 1000
seed = 26111992
fit <- aov(games$wanting ~ I(games$minage > 10))
T0 <- summary(fit)[[1]][1,4]
T_stat <- numeric(B)
n <- length(games$wanting)
for(i in 1:B){
perm <- sample(1:n)
want_perm <- games$wanting[perm]
fit_p <- aov(want_perm ~ I(games$minage > 10) )
T_stat[i] <- summary(fit_p)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=c(-1,20))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val # difference is significant
with(games, plot(playingtime, wanting))
# games with playingtime greater than 10000 can be considered outliers
# their wanting is low -> costumers are not looking for them
# let's see their characteristic, also compared to the others
out <- which(games$playingtime > 10000)
games$year[out] # they are not old
games$name[out]
plot(games$playingtime,games$average, col = factor(games$playingtime > 10000))
plot( games$playingtime, games$numratings, col = factor(games$playingtime > 10000))
knots_pers <- c(seq(0,100, by = 10),150,seq(200, 1000, by = 200))
model_cubic_splines <-
lm(wanting ~ bs(playingtime, degree = 3, knots = knots_pers), data = games)
new_data <-
with(games, data.frame(
playingtime = seq(range(playingtime)[1], range(playingtime)[2], by = 2)
))
preds = predict(model_cubic_splines, new_data,se=T)
se.bands = cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(games, plot(playingtime , wanting ,xlim=range(new_data$playingtime) ,cex =.5, col =" darkgrey " ))
lines(new_data$playingtime,preds$fit ,lwd =2, col =" blue")
matlines(new_data$playingtime, se.bands ,lwd =1, col =" blue",lty =3)
ind <- games$playingtime < 1000
plot(games$playingtime[ind], games$wanting[ind], cex =.5, col =" darkgrey " )
ind2 <- new_data$playingtime < 1000
lines(new_data$playingtime[ind2],preds$fit[ind2] ,lwd =2, col =" blue")
want_loc = npreg(wanting ~ playingtime,
ckertype = 'epanechnikov',
bws = 5, # bandwidth
data = games)
playingtime_newdata=data.frame(playingtime=with(games, seq(range(playingtime)[1],range(playingtime)[2],by=0.5)))
preds=predict(want_loc,newdata=playingtime_newdata,se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit) # we use standard error but we can maybe use something else
with(
games,
plot(
playingtime ,
wanting ,
xlim = range(playingtime_newdata$playingtime) ,
cex = .5,
col = " darkgrey ",
main = 'Local Averaging - bws20 - Gaussian kernel'
)
)
lines(playingtime_newdata$playingtime,preds$fit ,lwd =2, col =" blue")
matlines(playingtime_newdata$playingtime,se.bands ,lwd =1, col =" blue",lty =3)
ind <- games$playingtime < 1000
plot(games$playingtime[ind], games$wanting[ind], cex =.5, col =" darkgrey " )
ind2 <- playingtime_newdata$playingtime < 1000
lines(playingtime_newdata$playingtime[ind2],preds$fit[ind2] ,lwd =2, col =" blue")
matlines(playingtime_newdata$playingtime[ind2],se.bands[ind2,] ,lwd =1, col =" blue",lty =3)
# not what we want, there are too many data with a very low wanting
length(which(games$wanting < 300))
with(games, scatterplotMatrix(data.frame(average, playingtime, averageweight, minage)))
games_exclude <- which(games$minage == 0 | (games$numcomments/games$numratings < 0.2))
df <- games[-games_exclude,]
model_gam = gam(average ~ averageweight + s(minage, bs = 'cr') + s(playingtime, bs = 'cr'), data=df)
summary(model_gam)
model_gam2 = gam(average ~  s(wanting, bs = 'cr') + averageweight + s(minage, bs = 'cr'), data=df) # put wanting does not really make sense
summary(model_lm)
summary(model_gam2)
setwd("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS")
library(tidyverse)
library(tidytext)
library(caret)
library(cowplot)
library(dplyr)
library(GGally)
library(DepthProc)
library(aplpack)
library(splines)
rm(list=ls())
games <- readRDS("data.RDS")
glimpse(games)
summary(games)
dim(games)
dim(games[games$year > 1990, ])
compute.cooccurrence <- function(X) {
X <- as.matrix(X)
out <- crossprod(X)  # Same as: t(X) %*% X
diag(out) <- 0       # (b/c you don't count co-occurrences of an aspect with itself)
out
}
compute.cooccurrence(games[,31:100])
categorical.indices <- 31:100
category.indices <- 31:100
compute.cooccurrence(games[,category.indices])
write.csv(games, 'games_da_ripulire.csv')
names(games)
names(games)[7]
games[1,7]
games[1,15503]
games[1,15506]
games[1,7]
games[15503,7]
games[15504,7]
games[15505,7]
names(games)
