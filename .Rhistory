surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
cumulative.incidence <- 1 - fit$surv
cumulative.incidence
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
event = T,
title="Kaplan-Meier Curve for Lung Cancer Survival")
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
fun = 'event',
title="Kaplan-Meier Curve for Lung Cancer Survival")
H <- fit$cumhaz
plot(H)
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
fun='cumhaz',
title="Cumulative Hazard Curve for Lung Cancer Survival")
fit.age <- survfit(Surv(time, status==2) ~ age, data = lung)
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
ggsurvplot(fit.age,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Lung Cancer Survival")
ggsurvplot(fit.age, conf.int = F, risk.table.col = "strata", legend='none')
hist(lung$age)
summary(lung$age)
lung$agecut70 <- cut(lung$age, breaks=c(0,70, Inf), labels=c('young', 'old'))
fit.age <- survfit(Surv(time, status) ~ agecat70, data=lung)
lung$agecat70 <- cut(lung$age, breaks=c(0,70, Inf), labels=c('young', 'old'))
fit.age <- survfit(Surv(time, status) ~ agecat70, data=lung)
ggsurvplot(fit.age, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
legend.labs=c("Young (<= 70)","Old (> 70)"), legend.title="Age class",
palette=c("darkblue","cyan3"),
title="Kaplan-Meier Curves by age class for Lung Cancer Survival")
logranktest <- survdiff(Surv(time, status) ~ agecat70, data=lung)
logranktest
summary(lung$age)
lung$agecat70 <- cut(lung$age, breaks=c(0,63, Inf), labels=c('young', 'old'))
fit.age <- survfit(Surv(time, status) ~ agecat70, data=lung)
ggsurvplot(fit.age, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
legend.labs=c("Young (<= 70)","Old (> 70)"), legend.title="Age class",
palette=c("darkblue","cyan3"),
title="Kaplan-Meier Curves by age class for Lung Cancer Survival")
logranktest <- survdiff(Surv(time, status) ~ agecat70, data=lung)
logranktest
# hazard ratio
hr <- logranktest$obs[1]
logranktest
# hazard ratio
hr <- (logranktest$obs[1]/logranktest$exp[1])/(logranktest$obs[2]/logranktest$exp[2])
hr
### Cox Model
coxph(Surv(time, status) ~ agecat70, data=lung)
### Cox Model
coxph(Surv(time, status) ~ age, data=lung)
### Cox Model
cox.age <- coxph(Surv(time, status) ~ age, data=lung)
summary(cox.age)
plot(survfit(cox.age, data=lung),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
survfit(cox.age, data=lung)
age_df <- with(lung,
data.frame(age = c(50,65,80) )
)
fit.age <- survfit(cox.age, newdata = age_df)
fit.age
plot(survfit(fit.age, data=lung),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
fit.age <- survfit(cox.age, newdata = age_df)
plot(fit.age, conf.int=T,
col=c("dodgerblue2","navy","darkmagenta"), lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Adjusted Survival Probability Plot')
grid()
## Multiple cox regre
lung$sex <- ifelse(lung$sex==1,'Male','Female')
lung$sex <- as.factor(lung$sex)
mod.cox <- survfit(Surv(time, status) ~ age + sex + ph.karno, data=lung)
mod.cox <- coxph(Surv(time, status) ~ age + sex + ph.karno, data=lung)
summary(mod.cox)
mod.cox <- coxph(Surv(time, status) ~ age + sex + ph.karno + wt.loss, data=lung)
summary(mod.cox)
ggforest(mod.cox, data=lung)
plot(survfit(mod.cox, data=lung),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
# goodness of fit
plot(predict(mod.cox), residuals(mod.cox, type='martingale'),
xlab='Fitted values', ylab='Martingale residuals', main='Residual Plot', las=1)
# Add a line for residual=0
abline(h=0, col='red')
# Fit a smoother for the points
lines(smooth.spline(predict(mod.cox), residuals(mod.cox, type='martingale')), col='blue')
ggcoxdiagnostics(mod.cox, type = "martingale")
ggcoxdiagnostics(mod.cox, type = "deviance")
ggcoxdiagnostics(mod.cox, type = "schoenfeld")
sex.km <- survfit(Surv(time, status) ~ sex, data = lung[!is.na(lung$wt.loss) & !is.na(lung$ph.karno),])
plot(sex.km, fun='cloglog',
col=c("deeppink2","dodgerblue2"), lwd=2, lty=1,
ylab="log(-log(Survival Probability))")
grid()
legend('topleft', c("Female", "Male"),
lty=c(1,1), lwd=c(2,2), col=c("deeppink2","dodgerblue2"))
test.ph <- cox.zph(mod.cox)
test.ph
par(mfrow=c(2,2))
for(i in 1:4){
plot(test.ph[i])
abline(h=0, col='red')
}
ggcoxdiagnostics(mod.cox, type = "scaledsch")
mod.cox.strata <- coxph(Surv(time, status) ~ age + sex + strata(ph.karno) + wt.loss, data =  lung)
summary(mod.cox.strata)
test.ph.strata <- cox.zph(mod.cox.strata)
test.ph.strata
##### NonLinear Regression Mio ####
library(ISLR2)
##### NonLinear Regression Mio ####
library(ISLR2)
install.packages("ISLR2")
##### NonLinear Regression Mio ####
library(ISLR2)
library(car)
data("Wage")
rm(list=ls())
data(wage)
data(Wage)
wage <- wage$wage
age <- wage$age
wage <- Wage$wage
age <- Wage$age
plot(wage, age)
plot(age, wage)
m_linear=lm(wage ~ age)
summary(m_linear)
plot(m_linear)
help(seq)
grid <- seq(min(age), max(age), 1000)
plot(age, wage)
abline(grid, predict(m_linear, grid))
lines(grid, predict(m_linear, list(age=grid), se=T))
preds = predict(m_linear, list(age=grid), se=T)
preds <- predict(m_linear, list(age=grid), se=T)
lines(grid, preds$fit)
lines(grid,preds$fit ,lwd =2, col =" blue")
age.grid=seq(range(age)[1],range(age)[2],by=0.5)
age.grid
grid
grid <- seq(min(age), max(age), 0.01)
grid
grid <- seq(min(age), max(age), 0.5)
plot(age, wage)
preds <- predict(m_linear, list(age=grid), se=T)
lines(grid,preds$fit ,lwd =2, col =" blue")
age.grid=seq(range(age)[1],range(age)[2],by=0.5)
preds=predict(m_linear,list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(age ,wage ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Linear Fit')
lines(age.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
# polynomial
m_quad=lm(wage ~ age + I(age^2))
summary(m_quad)
preds=predict(m_quad,list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(age ,wage ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Linear Fit')
lines(age.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
# glm
m_list_logit=lapply(1:5,function(degree){glm(I(wage>250) ~ poly(age,degree=degree),family='binomial')})
do.call(what = anova, c(list(test="Chisq"), m_list_logit))
# various degrees
m_list=lapply(1:10,function(degree){lm(wage ~ poly(age,degree=degree))})
do.call(anova,m_list)
model <- m_list[[4]]
model
model <- m_list[[4]]
preds=predict(model,list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(age ,wage ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Linear Fit')
lines(age.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
# glm
m_list_logit=lapply(1:5,function(degree){glm(I(wage>250) ~ poly(age,degree=degree),family='binomial')})
do.call(what = anova, c(list(test="Chisq"), m_list_logit))
preds=predict(m_list_logit[[4]],list(age=age.grid),se=T)
pfit=exp(preds$fit )/(1+ exp( preds$fit ))
se.bands.logit = cbind(preds$fit +2* preds$se.fit , preds$fit -2*
preds$se.fit)
se.bands = exp(se.bands.logit)/(1+ exp(se.bands.logit))
plot(age ,I(wage >250) ,xlim=range(age.grid) ,type ="n",ylim=c(0 ,.2) )
points (jitter (age), I((wage >250) /5) ,cex =.5, pch ="|",
col =" darkgrey ", main='Poly 4 Fit - Logistic')
lines(age.grid ,pfit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
#prestige
with(Prestige,plot(income,prestige))
m_list=lapply(1:10,function(degree){lm(prestige ~ poly(income,degree=degree), data=Prestige)})
do.call(anova,m_list)
model <- m_list[[2]]
summary(model)
preds=predict(model,list(age=age.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
income.grid = seq(min(Prestige$income), max=Prestige$income, 10)
model <- m_list[[2]]
summary(model)
income.grid = seq(min(Prestige$income), max=Prestige$income, 10)
income.grid = seq(min(Prestige$income), max(Prestige$income), 10)
model <- m_list[[2]]
summary(model)
preds=predict(model,list(income=income),se=T)
preds=predict(model,list(income=income.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
plot(income ,prestige ,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Linear Fit', data=Prestige)
plot(Prestige$income ,Prestige$prestige,xlim=range(age.grid) ,cex =.5, col =" darkgrey ",main='Linear Fit')
plot(Prestige$income ,Prestige$prestige,xlim=range(income.grid) ,cex =.5, col =" darkgrey ",main='Linear Fit')
lines(income.grid,preds$fit ,lwd =2, col =" blue")
matlines (age.grid ,se.bands ,lwd =1, col =" blue",lty =3)
matlines (income.grid ,se.bands ,lwd =1, col =" blue",lty =3)
## Step Regression
with(Prestige,plot(income,prestige))
abline(lm(prestige~income, data=Prestige))
head(with(Prestige, cut(income,breaks = c(min(income),10000,max(income)))))
m_cut <- lm(prestige ~  cut(income,breaks = c(min(income),10000,max(income)), date=Prestige)
m_cut <- lm(prestige ~  cut(income,breaks = c(min(income),10000,max(income))), data=Prestige)
m_cut <- lm(prestige ~  cut(income,breaks = c(min(income),10000,max(income))), data=Prestige)
summary(m_cut)
abline(m_cut)
income.grid=with(Prestige, seq(range(income)[1],range(income)[2],by=10))
preds=predict(m_cut,list(income=income.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(income.grid) ,cex =.5, col =" darkgrey ",main='Custom cut Fit'))
lines(income.grid,preds$fit ,lwd =2, col =" blue")
matlines(income.grid ,se.bands ,lwd =1, col =" blue",lty =3)
m_cut=lm(prestige ~ cut(income,breaks=4),data = Prestige)
m_cut=lm(prestige ~ cut(income,breaks=4),data = Prestige)
income.grid=with(Prestige, seq(range(income)[1],range(income)[2],by=10))
preds=predict(m_cut,list(income=income.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(income.grid) ,cex =.5, col =" darkgrey ",main='Custom cut Fit'))
lines(income.grid,preds$fit ,lwd =2, col =" blue")
matlines(income.grid ,se.bands ,lwd =1, col =" blue",lty =3)
m_cut=lm(prestige ~ cut(income,breaks=7),data = Prestige)
income.grid=with(Prestige, seq(range(income)[1],range(income)[2],by=10))
preds=predict(m_cut,list(income=income.grid),se=T)
se.bands=cbind(preds$fit +2* preds$se.fit ,preds$fit -2* preds$se.fit)
with(Prestige, plot(income ,prestige ,xlim=range(income.grid) ,cex =.5, col =" darkgrey ",main='Custom cut Fit'))
lines(income.grid,preds$fit ,lwd =2, col =" blue")
matlines(income.grid ,se.bands ,lwd =1, col =" blue",lty =3)
source("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS/outlier detection.R", echo=TRUE)
setwd("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS")
source("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS/outlier detection.R", echo=TRUE)
##### Robust statistics on wanting/owning ####
library(robustbase)
fit_MCD <- covMcd(x = games[, c('wanting', 'owned', 'average', 'averageweight')], alpha = .99, nsamp = "best")
fit_MCD
ind_best_subset <- fit_MCD$best
N <- nrow(games[, c('wanting', 'owned')])
p <- ncol(games[, c('wanting', 'owned')])
library(ggpubr)
games.plot <- cbind(games, status=ifelse(1:N%in%ind_best_subset,"inlier","outlier"))
owned.dplot <- ggdensity(games.plot, "owned", fill = "status",
palette = "jco") + rotate() + clean_theme()
wanting.dplot <- ggdensity(games.plot, "wanting", fill = "status",
palette = "jco") + clean_theme()
average.dplot <- ggdensity(games.plot, "average", fill = "status",
palette = "jco") + rotate() + clean_theme()
complexity.dplot <- ggdensity(games.plot, "averageweight", fill = "status",
palette = "jco") + clean_theme()
sp.wo <- ggscatter(games.plot, x = "wanting", y = "owned",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
sp.wa <- ggscatter(games.plot, x = "wanting", y = "average",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
sp.ac <- ggscatter(games.plot, x = "averageweight", y = "average",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
sp.oc <- ggscatter(games.plot, x = "averageweight", y = "owned",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
x11()
ggarrange(NULL, complexity.dplot, wanting.dplot,
owned.dplot, sp.oc, sp.wo,
average.dplot, sp.ac, sp.wa,
labels = c("A", "B", "C",
'D', 'E', 'F',
'G', 'H', 'I'),
ncol = 3, nrow = 3, align='hv', common.legend = TRUE, legend = "top")
plot(fit_MCD,classic=TRUE)
fit_MCD <- covMcd(x = games[, c('wanting', 'owned', 'average', 'averageweight')], alpha = .99, nsamp = "best")
fit_MCD
plot(fit_MCD,classic=TRUE)
games <- games[games.plot$status == 'inlier',]
source("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS/outlier detection.R", echo=TRUE)
ind_best_subset <- fit_MCD$best
N <- nrow(games[, c('wanting', 'owned')])
p <- ncol(games[, c('wanting', 'owned')])
library(ggpubr)
games.plot <- cbind(games, status=ifelse(1:N%in%ind_best_subset,"inlier","outlier"))
owned.dplot <- ggdensity(games.plot, "owned", fill = "status",
palette = "jco") + rotate() + clean_theme()
wanting.dplot <- ggdensity(games.plot, "wanting", fill = "status",
palette = "jco") + clean_theme()
average.dplot <- ggdensity(games.plot, "average", fill = "status",
palette = "jco") + rotate() + clean_theme()
complexity.dplot <- ggdensity(games.plot, "averageweight", fill = "status",
palette = "jco") + clean_theme()
sp.wo <- ggscatter(games.plot, x = "wanting", y = "owned",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
sp.wa <- ggscatter(games.plot, x = "wanting", y = "average",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
sp.ac <- ggscatter(games.plot, x = "averageweight", y = "average",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
sp.oc <- ggscatter(games.plot, x = "averageweight", y = "owned",
#add = "reg.line",               # Add regression line
#conf.int = TRUE,                # Add confidence interval
color = 'status',
palette = "jco", # Color by groups "cyl"
shape = "status"                   # Change point shape by groups "cyl"
)
x11()
ggarrange(NULL, complexity.dplot, wanting.dplot,
owned.dplot, sp.oc, sp.wo,
average.dplot, sp.ac, sp.wa,
labels = c("A", "B", "C",
'D', 'E', 'F',
'G', 'H', 'I'),
ncol = 3, nrow = 3, align='hv', common.legend = TRUE, legend = "top")
games <- games[games.plot$status == 'inlier',]
write.csv(games, 'clusterized_games2.csv')
games <- read.csv('clusterized_games1.csv')
games <- read.csv('clusterized_games1.csv')
games <- games[games$year > 2000, ]
perm_anova_twoway_interaction = function(outcome,factor1,factor2,iter=1e3){
T0 <- summary.aov(aov(outcome ~ factor1 + factor2 + factor1:factor2))[[1]][3,4]
T_stat <- numeric(iter)
n <- length(outcome)
aov.H0 <- aov(outcome ~ factor1 + factor2)
residuals.H0 <- aov.H0$residuals
pb = progress::progress_bar$new(total = iter,
format = " Processing [:bar] :percent eta: :eta")
set.seed(2022)
for(perm in 1:iter){
permutation <- sample(1:n)
residuals.H0 <- residuals.H0[permutation]
y.perm.H0 <- aov.H0$fitted + residuals.H0
T_stat[perm] <- summary.aov(aov(y.perm.H0 ~ factor1 + factor2 + factor1:factor2))[[1]][3,4]
pb$tick()
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat), xlim = range(c(T_stat,T0)))
abline(v=T0,col=3,lwd=2)
p_val <- sum(T_stat>=T0)/iter
# print(p_val)
return(p_val)
}
perm_anova_twoway_factor12 = function(outcome,factor1,factor2, interac = FALSE, iter=1e3){
if (interac){
full_mod <- outcome ~ factor1 + factor2 + factor1:factor2
short_mod1 <- outcome ~ factor2 + factor1:factor2
short_mod2 <- outcome ~ factor1 + factor1:factor2
}else{
full_mod <- outcome ~ factor1 + factor2
short_mod1 <- outcome ~ factor2
short_mod2 <- outcome ~ factor1
}
T0_1 <- summary.aov(aov(full_mod ))[[1]][1,4]
T0_2 <- summary.aov(aov(full_mod ))[[1]][2,4]
T_stat_1 <- T_stat_2 <- numeric(iter)
n <- length(outcome)
aov.H0_1 <- aov(short_mod1 )
residuals.H0_1 <- aov.H0_1$residuals
aov.H0_2 <- aov(short_mod2 )
residuals.H0_2 <- aov.H0_2$residuals
pb = progress::progress_bar$new(total = iter,
format = " Processing [:bar] :percent eta: :eta")
set.seed(2022)
for(perm in 1:iter){
permutation <- sample(1:n)
y.perm.H0_1 <- aov.H0_1$fitted + residuals.H0_1[permutation]
newfm <- reformulate(deparse(full_mod[[3]]), response = "y.perm.H0_1")
T_stat_1[perm] <- summary.aov(aov(newfm))[[1]][1,4]
y.perm.H0_2 <- aov.H0_2$fitted + residuals.H0_2[permutation]
newfm <- reformulate(deparse(full_mod[[3]]), response = "y.perm.H0_2")
T_stat_2[perm] <- summary.aov(aov(newfm))[[1]][2,4]
pb$tick()
}
hist(T_stat_1,xlim=range(c(T_stat_1,T0_1)),breaks=30)
abline(v=T0_1,col=3,lwd=2)
hist(T_stat_2,xlim=range(c(T_stat_2,T0_2)),breaks=30)
abline(v=T0_2,col=3,lwd=2)
plot(ecdf(T_stat_1), xlim=range(c(T_stat_1,T0_1)))
abline(v=T0_1,col=3,lwd=2)
plot(ecdf(T_stat_2), xlim=range(c(T_stat_2,T0_2)))
abline(v=T0_2,col=3,lwd=2)
print(sum(T_stat_1>=T0_1)/iter)
print(sum(T_stat_2>=T0_2)/iter)
}
low_avgw = 2.5
high_avgw = 3
boxplot(games$wanting ~ I(games$averageweight < high_avgw & games$averageweight > low_avgw) + games$cluster)
B = 1000
perm_anova_twoway_interaction(games$wanting, factor1 = I(games$averageweight < high_avgw & games$averageweight > low_avgw),
factor2 = games$cluster, iter = B)
# interaction term is significant
perm_anova_twoway_factor12(games$wanting, factor1 = I(games$averageweight < high_avgw & games$averageweight > low_avgw),
factor2 = games$cluster, interac = TRUE, iter = B)
#### permutational anova  wanting ~  low_avgw < avg_weight < high_avgw ####
low_avgw = 2.5
high_avgw = 3
boxplot(games$wanting ~ I(games$averageweight < high_avgw & games$averageweight > low_avgw))
length(which(games$averageweight < high_avgw & games$averageweight > low_avgw)) # 1587
B = 1000
seed = 26111992
fit <- aov(games$wanting ~ I(games$averageweight < high_avgw & games$averageweight > low_avgw))
T0 <- summary(fit)[[1]][1,4]
T_stat <- numeric(B)
n <- length(games$wanting)
for(i in 1:B){
perm <- sample(1:n)
want_perm <- games$wanting[perm]
fit_p <- aov( want_perm ~ I(games$averageweight < high_avgw & games$averageweight > low_avgw) )
T_stat[i] <- summary(fit_p)[[1]][1,4]
}
hist(T_stat,xlim=range(c(T_stat,T0)),breaks=30)
abline(v=T0,col=3,lwd=2)
plot(ecdf(T_stat),xlim=range(c(T_stat,T0)))
abline(v=T0,col=3,lwd=4)
# p-value
p_val <- sum(T_stat>=T0)/B
p_val
low_avgw = 2.5
high_avgw = 3
boxplot(games$average ~ I(games$averageweight < high_avgw & games$averageweight > low_avgw) + games$cluster)
B = 1000
perm_anova_twoway_interaction(games$average, factor1 = I(games$averageweight < high_avgw & games$averageweight > low_avgw),
factor2 = games$cluster, iter = B)
# interaction term is not significant
perm_anova_twoway_factor12(games$average, factor1 = I(games$averageweight < high_avgw & games$averageweight > low_avgw),
factor2 = games$cluster, interac = FALSE, iter = B)
