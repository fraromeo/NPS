}
probs <- c()
# Lev 7
p7_sample <- p_f(x[7], RWsample[1000:N,])
hist(p7_sample, probability=TRUE)
prob7 <- sum(p7_sample^20)/N
probs <- cbind(probs, prob7)
# Lev 8
p8_sample <- p_f(x[8], RWsample[1000:N,])
hist(p8_sample, probability=TRUE)
prob8 <- sum(p8_sample^20)/N
probs <- cbind(probs, prob8)
probs
##### Point 5
prob_vec <- c()
ind <- c()
answer <- NULL
answer_prob <- 0
for (i in seq(6,7,0.001)) {
p_sample <- p_f(i, RWsample[1000:N,])
prob <- sum(p_sample^20)/N
ind <- cbind(ind, i)
prob_vec <- cbind(prob_vec, prob)
if (prob >= 0.9 && is.null(answer)) {
answer <- i
answer_prob <- prob
}
}
print(c('Final Answer is: ', answer))
print(c('Correspondent Probability is: ', answer_prob))
probs
for (i in seq(6.5,7,0.001)) {
p_sample <- p_f(i, RWsample[1000:N,])
prob <- sum(p_sample^20)/N
ind <- cbind(ind, i)
prob_vec <- cbind(prob_vec, prob)
if (prob >= 0.9 && is.null(answer)) {
answer <- i
answer_prob <- prob
}
}
print(c('Final Answer is: ', answer))
print(c('Correspondent Probability is: ', answer_prob))
plot(ind, prob_vec)
abline(v = 0.9)
abline(h = 0.9)
abline(h = 0.9, col = 'red')
plot(ind, prob_vec, type = 'l')
abline(h = 0.9, col = 'red')
##### Point 5
prob_vec <- c()
ind <- c()
answer <- NULL
answer_prob <- 0
for (i in seq(6.5,7,0.001)) {
p_sample <- p_f(i, RWsample[1000:N,])
prob <- sum(p_sample^20)/N
ind <- cbind(ind, i)
prob_vec <- cbind(prob_vec, prob)
if (prob >= 0.9 && is.null(answer)) {
answer <- i
answer_prob <- prob
}
}
print(c('Final Answer is: ', answer))
print(c('Correspondent Probability is: ', answer_prob))
plot(ind, prob_vec, type = 'l')
abline(h = 0.9, col = 'red')
abline(v = answer, col = 'green')
##### Point 5
prob_vec <- c()
ind <- c()
answer <- NULL
answer_prob <- 0
for (i in seq(3,7,0.001)) {
p_sample <- p_f(i, RWsample[1000:N,])
prob <- sum(p_sample^20)/N
ind <- cbind(ind, i)
prob_vec <- cbind(prob_vec, prob)
if (prob >= 0.9 && is.null(answer)) {
answer <- i
answer_prob <- prob
}
}
print(c('Final Answer is: ', answer))
print(c('Correspondent Probability is: ', answer_prob))
plot(ind, prob_vec, type = 'l', ylab = 'prob', xlab = 'level')
abline(h = 0.9, col = 'red')
abline(v = answer, col = 'green')
LogPost6 <- function ( theta , x, expo, killed ) {
p =  (1 + exp(-(x- theta[1])/exp(theta[2])))^-1
lp = sum(killed * log(p) + (expo - killed)*log(1-p))
return (lp)
}
res6 <- laplace(LogPost6, mode = c(5,-2), x = x, expo = expo, killed = killed)
print(res6)
burnin <- 100
N <- 100000
RWsample6 <- matrix(c(res6$mode[1], res6$mode[2]), N, 2, byrow = TRUE)
count <- 0
for (i in 2:N) {
prop <- RWsample6[i-1,]+ rmvnorm(1,c(0,0), res6$var)
accept <- min(0, LogPost6(prop,x,expo,killed)-LogPost6(RWsample6[i-1,],x,expo,killed))
if (log(runif(1))<accept){
RWsample6[i,] <- prop
count <- count +1
}
else
RWsample6[i,]<- RWsample6[i-1,]
}
print(count/N) # acceptance rate
hist(RWsample6[burnin:N,1], probability=TRUE)
lines(seq(4.5, 6, 0.01), dnorm(seq(4.5, 6, 0.01), res6$mode[1], sqrt(res6$var[1,1])), type = 'l')
hist(RWsample6[burnin:N,2], probability=TRUE)
lines(seq(-2.5, -0.5, 0.01), dnorm(seq(-2.5, -0.5, 0.01), res6$mode[2], sqrt(res6$var[2,2])), type = 'l')
plot(RWsample6[burnin:N,1],type = 'l')
plot(RWsample6[burnin:N,2],type = 'l')
p_f6 <- function(lev, theta) {
p =  (1 + exp(-(lev - theta[,1])/exp(theta[,2])))^-exp(0)
return(p)
}
probs6 <- c()
# Lev 7
p76_sample <- p_f6(x[7], RWsample6[burnin:N,])
hist(p76_sample, probability=TRUE)
prob76 <- sum(p76_sample^20)/N
probs6 <- cbind(probs6, prob76)
# Lev 8
p86_sample <- p_f6(x[8], RWsample6[burnin:N,])
hist(p86_sample, probability=TRUE)
prob86 <- sum(p86_sample^20)/N
probs6 <- cbind(probs6, prob86)
probs6
prob_vec6 <- c()
ind6 <- c()
answer6 <- NULL
answer_prob6 <- 0
for (i in seq(7,8,0.01)) {
p_sample6 <- p_f6(i, RWsample6[burnin:N,])
prob6 <- sum(p_sample6^20)/N
ind6 <- cbind(ind6, i)
prob_vec6 <- cbind(prob_vec6, prob6)
if (prob6 >= 0.9 && is.null(answer6)) {
answer6 <- i
answer_prob6 <- prob6
}
}
print(c('Final Answer is: ', answer6))
print(c('Correspondent Probability is: ', answer_prob6))
plot(ind6, prob_vec6, type = 'l', ylab = 'prob', xlab = 'level')
abline(h = 0.9, col = 'red')
abline(v = answer6, col = 'green')
probs6
for (i in seq(3,8,0.01)) {
p_sample6 <- p_f6(i, RWsample6[burnin:N,])
prob6 <- sum(p_sample6^20)/N
ind6 <- cbind(ind6, i)
prob_vec6 <- cbind(prob_vec6, prob6)
if (prob6 >= 0.9 && is.null(answer6)) {
answer6 <- i
answer_prob6 <- prob6
}
}
print(c('Final Answer is: ', answer6))
print(c('Correspondent Probability is: ', answer_prob6))
plot(ind6, prob_vec6, type = 'l', ylab = 'prob', xlab = 'level')
abline(h = 0.9, col = 'red')
abline(v = answer6, col = 'green')
prob_vec6 <- c()
ind6 <- c()
answer6 <- NULL
answer_prob6 <- 0
for (i in seq(3,8,0.01)) {
p_sample6 <- p_f6(i, RWsample6[burnin:N,])
prob6 <- sum(p_sample6^20)/N
ind6 <- cbind(ind6, i)
prob_vec6 <- cbind(prob_vec6, prob6)
if (prob6 >= 0.9 && is.null(answer6)) {
answer6 <- i
answer_prob6 <- prob6
}
}
print(c('Final Answer is: ', answer6))
print(c('Correspondent Probability is: ', answer_prob6))
plot(ind6, prob_vec6, type = 'l', ylab = 'prob', xlab = 'level')
abline(h = 0.9, col = 'red')
abline(v = answer6, col = 'green')
##### Assignment 2 ####
rm(list = ls())
graphics.off()
library(LearnBayes)
library(mvtnorm)
x <- seq(3.5, 7, 0.5)
expo <- c(62, 59, 60, 61, 58, 62, 59, 60)
killed <- c(7, 13, 19, 27, 54, 59, 58, 60)
LogPost <- function ( theta , x, expo, killed ) {
p =  (1 + exp(-(x- theta[1])/exp(theta[2])))^-exp(theta[3])
lp = sum(killed * log(p) + (expo - killed)*log(1-p))
return (lp)
}
res <- laplace(LogPost, mode = c(5,-2,-1), x = x, expo = expo, killed = killed)
print(res)
#### Point 4 ####
simulation <- function (N, mode, nparams, logpost) {
RWsample <- matrix(mode, N, nparams, byrow = TRUE)
count <- 0
for (i in 2:N) {
prop <- RWsample[i-1,]+ rmvnorm(1,c(0,0,0), res$var)
accept <- min(0, logpost(prop,x,expo,killed)-logpost(RWsample[i-1,],x,expo,killed))
if (log(runif(1))<accept){
RWsample[i,] <- prop
count <- count +1
}
else
RWsample[i,]<- RWsample[i-1,]
}
return (RWsample)
}
RWsample = simulation(1000, res$mode, 3, LogPost)
print(count/N) # acceptance rate
#### Point 4 ####
simulation <- function (N, mode, nparams, logpost) {
RWsample <- matrix(mode, N, nparams, byrow = TRUE)
count <- 0
for (i in 2:N) {
prop <- RWsample[i-1,]+ rmvnorm(1,c(0,0,0), res$var)
accept <- min(0, logpost(prop,x,expo,killed)-logpost(RWsample[i-1,],x,expo,killed))
if (log(runif(1))<accept){
RWsample[i,] <- prop
count <- count +1
}
else
RWsample[i,]<- RWsample[i-1,]
}
print(count/N)
return (RWsample)
}
RWsample = simulation(1000, res$mode, 3, LogPost)
hist(RWsample[1000:N,1], probability=TRUE, main = 'Posterior for theta1', breaks = 40)
N = 1000
RWsample = simulation(N, res$mode, 3, LogPost)
hist(RWsample[1000:N,1], probability=TRUE, main = 'Posterior for theta1', breaks = 40)
lines(seq(4.5, 6, 0.01), dnorm(seq(4.5, 6, 0.01), res$mode[1], sqrt(res$var[1,1])), type = 'l')
hist(RWsample[1000:N,2], probability=TRUE, main = 'Posterior for theta2', breaks = 40)
lines(seq(-2.5, -0.5, 0.01), dnorm(seq(-2.5, -0.5, 0.01), res$mode[2], sqrt(res$var[2,2])), type = 'l')
RWsample
#### Point 4 ####
simulation <- function (N, mode, nparams, logpost) {
RWsample <- matrix(mode, N, nparams, byrow = TRUE)
count <- 0
for (i in 2:N) {
prop <- RWsample[i-1,]+ rmvnorm(1,c(0,0,0), res$var)
accept <- min(0, logpost(prop,x,expo,killed)-logpost(RWsample[i-1,],x,expo,killed))
if (log(runif(1))<accept){
RWsample[i,] <- prop
count <- count +1
}
else
RWsample[i,]<- RWsample[i-1,]
}
print(count/N)
return (RWsample)
}
N = 10000
RWsample = simulation(N, res$mode, 3, LogPost)
hist(RWsample[100:N,1], probability=TRUE, main = 'Posterior for theta1', breaks = 40)
lines(seq(4.5, 6, 0.01), dnorm(seq(4.5, 6, 0.01), res$mode[1], sqrt(res$var[1,1])), type = 'l')
hist(RWsample[100:N,2], probability=TRUE, main = 'Posterior for theta2', breaks = 40)
lines(seq(-2.5, -0.5, 0.01), dnorm(seq(-2.5, -0.5, 0.01), res$mode[2], sqrt(res$var[2,2])), type = 'l')
hist(RWsample[100:N,3], probability=TRUE, main = 'Posterior for theta3', breaks = 40)
lines(seq(-2.5, 0.5, 0.01), dnorm(seq(-2.5, 0.5, 0.01), res$mode[3], sqrt(res$var[3,3])), type = 'l')
#Check
plot(RWsample6[burnin:N,1],type = 'l')
N <- 1000
RWsample6 <- simulation(N, res6$mode, 2, LogPost6)
#Posterior and Laplace
LogPost6 <- function ( theta , x, expo, killed ) {
p =  (1 + exp(-(x- theta[1])/exp(theta[2])))^-1
lp = sum(killed * log(p) + (expo - killed)*log(1-p))
return (lp)
}
res6 <- laplace(LogPost6, mode = c(5,-2), x = x, expo = expo, killed = killed)
print(res6)
#Simulation
burnin <- 100
N <- 1000
RWsample6 <- simulation(N, res6$mode, 2, LogPost6)
##### Assignment 2 ####
rm(list = ls())
graphics.off()
library(LearnBayes)
library(mvtnorm)
x <- seq(3.5, 7, 0.5)
expo <- c(62, 59, 60, 61, 58, 62, 59, 60)
killed <- c(7, 13, 19, 27, 54, 59, 58, 60)
LogPost <- function ( theta , x, expo, killed ) {
p =  (1 + exp(-(x- theta[1])/exp(theta[2])))^-exp(theta[3])
lp = sum(killed * log(p) + (expo - killed)*log(1-p))
return (lp)
}
res <- laplace(LogPost, mode = c(5,-2,-1), x = x, expo = expo, killed = killed)
print(res)
#### Point 4 ####
simulation <- function (N, laplace, nparams, logpost) {
RWsample <- matrix(laplace$mode, N, nparams, byrow = TRUE)
count <- 0
for (i in 2:N) {
prop <- RWsample[i-1,]+ rmvnorm(1,rep(0,nparams), laplace$var)
accept <- min(0, logpost(prop,x,expo,killed)-logpost(RWsample[i-1,],x,expo,killed))
if (log(runif(1))<accept){
RWsample[i,] <- prop
count <- count +1
}
else
RWsample[i,]<- RWsample[i-1,]
}
print(count/N)
return (RWsample)
}
N = 10000
RWsample = simulation(N, res, 3, LogPost)
hist(RWsample[100:N,1], probability=TRUE, main = 'Posterior for theta1', breaks = 40)
lines(seq(4.5, 6, 0.01), dnorm(seq(4.5, 6, 0.01), res$mode[1], sqrt(res$var[1,1])), type = 'l')
plot(RWsample[1000:N,1],type = 'l')
#Plot Traces
plot(RWsample[100:N,1],type = 'l')
plot(RWsample[100:N,2],type = 'l')
rm(list = ls())
library(le)
library(LearnBayes)
data <- baseball.1964
logpost <- bradley.terry.post
logpost
start.vec <- rnorm(11,0,1)
result <- matrix(start.vec, Nsim, 11, byrow = TRUE)
Nsim <- 2000
result <- matrix(start.vec, Nsim, 11, byrow = TRUE)
accept <- 0
accept <- accept + 1
for (i in 2:Nsim){
prop <- rnorm(11, result[i-1,], 0.1)
if (log(runif(1)) < logpost(prop, data) - logpost(result[i-1],data)) {
result[i,] <- prop
accept <- accept + 1
}
result[i,] <- result[i-1,]
}
if (log(runif(1)) < logpost(prop, data) - logpost(result[i-1,],data)) {
result[i,] <- prop
accept <- accept + 1
}
source('~/.active-rstudio-document', echo=TRUE)
plot(result[,11], type = 'l')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
prob <- exp(result[,2] - result[,1])/(1 + exp(result[,2] - result[,1]))
prob
A <- sapply(prob, function(pr) dbinom(0:10, 10, pr))
A
summary(A)
summary(A)
summary(t(A))
##### 10.7.5 ####
rm(list = ls())
##### 10.7.7
rm(list = ls())
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
alpha=0.05
n <- 10
B <- 1000
seed=26111992
sigma=2
x.grid <- seq(-5, 5, by=0.01)
plot(x.grid, dnorm(x.grid,sd=sigma), type='l')
p.value <- numeric(B)
#pb=progress_bar$new(total=B)
#pb$tick(0)
set.seed(seed)
for(j in 1:B){
x1 <- rnorm(n,sd=sigma)
x2 = rnorm(n,sd=sigma)
p.value[j] <- t.test(x1,y=x2)$p.value
#pb$tick()
}
hist(p.value, main = 'Normal')
plot(ecdf(p.value), main = 'Normal')
abline(0,1, lty=2, col='red')
alpha=0.05
n <- 10
B <- 1000
seed=26111992
sigma=2
x.grid <- seq(-5, 5, by=0.01)
plot(x.grid, dnorm(x.grid,sd=sigma), type='l')
p.value <- numeric(B)
#pb=progress_bar$new(total=B)
#pb$tick(0)
set.seed(seed)
for(j in 1:B){
x1 <- rnorm(n,sd=sigma)
x2 = rnorm(n,sd=sigma)
p.value[j] <- t.test(x1,y=x2)$p.value
#pb$tick()
}
hist(p.value, main = 'Normal')
plot(ecdf(p.value), main = 'Normal')
abline(0,1, lty=2, col='red')
estimated.alpha <- sum(p.value < alpha)/B
c(estimated.alpha - sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975), estimated.alpha, estimated.alpha + sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975))
semiamp=sqrt(6)
plot(x.grid, dunif(x.grid,min=-semiamp,max=semiamp), type='l')
p.value <- numeric(B)
#pb=progress_bar$new(total=B)
#pb$tick(0)
set.seed(seed)
for(j in 1:B)
{
x1 <- runif(n,min=-semiamp,max=semiamp)
x2 =  runif(n,min=-semiamp,max=semiamp)
p.value[j] <- t.test(x1,y=x2)$p.value
#pb$tick()
}
hist(p.value, main = 'Uniform')
plot(ecdf(p.value), main = 'Uniform')
abline(0,1, lty=2, col='red')
estimated.alpha <- sum(p.value < alpha)/B
c(estimated.alpha - sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975), estimated.alpha, estimated.alpha + sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975))
x.grid <- seq(-5, 5, by=0.01)
plot(x.grid, dt(x.grid, 2), type='l')
lines(x.grid, dnorm(x.grid,sd=sigma),col='red')
p.value <- numeric(B)
#pb=progress_bar$new(total=B)
#pb$tick(0)
set.seed(seed)
for(j in 1:B)
{
x.1 <- rt(n, 1)
x.2 = rt(n,1)
p.value[j] <- t.test(x.1,y=x.2)$p.value
#pb$tick()
}
hist(p.value, main = 'Student-t')
plot(ecdf(p.value), main = 'Student-t')
abline(0,1, lty=2, col='red')
estimated.alpha <- sum(p.value < alpha)/B
c(estimated.alpha - sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975), estimated.alpha, estimated.alpha + sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975))
library(stabledist)
x.grid <- seq(-5, 5, by=0.01)
plot(x.grid, dstable(x.grid,1,0), type='l') #cauchy
lines(x.grid, dstable(x.grid,2,0), type='l',col="red") #normal
lines(x.grid, dstable(x.grid,1.5,0), type='l',col="orange")
lines(x.grid, dstable(x.grid,0.5,0), type='l',col="green")
lines(x.grid, dstable(x.grid,0.1,0), type='l',col="blue")
plot(x.grid, dstable(x.grid,1,0), type='l') #cauchy
lines(x.grid, dstable(x.grid,1,0.5), type='l',col="red")
lines(x.grid, dstable(x.grid,1,1), type='l',col="orange")
x.grid <- seq(-5, 5, by=0.01)
plot(x.grid, dnorm(x.grid), type='l')
lines(x.grid, dstable(x.grid,1.5,0), type='l',col='red')
p.value <- numeric(B)
#pb=progress_bar$new(total=B)
#pb$tick(0)
set.seed(seed)
for(j in 1:B)
{
x.1 <- rstable(n,1.5,0)
x.2 = rstable(n,1.5,0)
p.value[j] <- t.test(x.1,y=x.2)$p.value
#pb$tick()
}
hist(p.value, main = 'Stable - Alpha=1.5')
plot(ecdf(p.value), main = 'Alpha=1.5')
abline(0,1, lty=2, col='red')
estimated.alpha <- sum(p.value < alpha)/B
c(estimated.alpha - sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975), estimated.alpha, estimated.alpha + sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975))
plot(x.grid, dnorm(x.grid), type='l', ylim=c(0,.8))
lines(x.grid, dstable(x.grid,.5,0), type='l',col='red')
p.value <- numeric(B)
#pb=progress_bar$new(total=B)
#pb$tick(0)
set.seed(seed)
for(j in 1:B)
{
x.1 <- rstable(n,.5,0)
x.2 = rstable(n,.5,0)
p.value[j] <- t.test(x.1,y=x.2)$p.value
#pb$tick()
}
plot(x.grid, dnorm(x.grid), type='l', ylim=c(0,.8))
lines(x.grid, dstable(x.grid,.5,0), type='l',col='red')
p.value <- numeric(B)
#pb=progress_bar$new(total=B)
#pb$tick(0)
set.seed(seed)
for(j in 1:B)
{
x.1 <- rstable(n,.5,0)
x.2 = rstable(n,.5,0)
p.value[j] <- t.test(x.1,y=x.2)$p.value
#pb$tick()
}
hist(p.value, main = 'Stable - Alpha = 0.5')
plot(ecdf(p.value), main = 'Alpha = 0.5')
abline(0,1, lty=2, col='red')
estimated.alpha <- sum(p.value < alpha)/B
c(estimated.alpha - sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975), estimated.alpha, estimated.alpha + sqrt(estimated.alpha*(1-estimated.alpha)/B)*qnorm(0.975))
source("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS/intro.R", echo=TRUE)
setwd("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS")
source("C:/Users/david/OneDrive - Politecnico di Milano/Magistrale/Non Parametric Statistics/NPS/intro.R", echo=TRUE)
